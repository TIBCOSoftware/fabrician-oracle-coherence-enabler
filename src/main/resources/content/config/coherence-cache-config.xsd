<?xml version="1.0"?>


<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://xmlns.oracle.com/coherence/coherence-cache-config"
            xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="1.1">

    <xsd:annotation>
        <xsd:documentation>
            Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

            Oracle is a registered trademarks of Oracle Corporation and/or its
            affiliates.

            This software is the confidential and proprietary information of
            Oracle Corporation. You shall not disclose such confidential and
            proprietary information and shall use it only in accordance with the
            terms of the license agreement you entered into with Oracle.

            This notice may not be removed or altered.
        </xsd:documentation>
    </xsd:annotation>

    <xsd:annotation>
        <xsd:documentation>
            This is the XML schema for the Coherence cache configuration file
            (coherence-cache-config.xml).
    </xsd:documentation>
    </xsd:annotation>

    <xsd:include schemaLocation="coherence-cache-config-base.xsd" />

    <xsd:element name="cache-config">
        <xsd:annotation>
            <xsd:documentation>
                The cache-config element is the root element of the
                cache-config descriptor.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scope-name" minOccurs="0" />
                <xsd:element ref="defaults" minOccurs="0" />
                <xsd:element ref="caching-scheme-mapping" minOccurs="0"/>
                <xsd:element ref="caching-schemes" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="scope-name" type="coherence-string-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
              The scope-name element contains the scope name for this configuration.
              The scope name is typically added to the service name (as a prefix)
              for all services generated by a cache factory.  Scope may be used to isolate
              services indicated in this cache configuration from services created
              by cache factories with other configurations, thus avoiding unintended
              joining of services with similar names from different configurations.

              Used in: cache-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="defaults">
        <xsd:annotation>
            <xsd:documentation>
                The defaults element defines factory wide default settings.

                Used in: cache-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="socket-provider" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="caching-scheme-mapping">
        <xsd:annotation>
            <xsd:documentation>
                The caching-scheme-mapping element contains the bindings between the
                cache names and the caching schemes specified for the caches to use.

                Used in: cache-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="cache-mapping" maxOccurs="unbounded" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="cache-mapping">
        <xsd:annotation>
            <xsd:documentation>
                The cache-mapping element contains a single binding between a cache
                name and a caching scheme this cache will use. Following cache name
                patterns are supported:
                - exact match, i.e. "MyCache",
                - prefix match, i.e. "My*" that matches to any cache name starting
                with "My",
                - any match "*", that matches to any cache name.

                Starting with Coherence 3.0 the cache-mapping element allows specifying
                replaceable cache scheme parameters by supplying any number of
                "init-param" elements.

                During cache scheme parsing, any occurrence of any replaceable parameter
                in format "{parameter-name}" is replaced with the corresponding
                parameter value.

                Consider the following cache mapping example:

                &lt;cache-mapping&gt;
                    &lt;cache-name&gt;My*&lt;/cache-name&gt;
                    &lt;scheme-name&gt;my-scheme&lt;/scheme-name&gt;
                    &lt;init-params&gt;
                        &lt;init-param&gt;
                            &lt;param-name&gt;cache-loader&lt;/param-name&gt;
                            &lt;param-value&gt;com.acme.MyCacheLoader&lt;/param-value&gt;
                        &lt;/init-param&gt;
                        &lt;init-param&gt;
                            &lt;param-name&gt;size-limit&lt;/param-name&gt;
                            &lt;param-value&gt;1000&lt;/param-value&gt;
                        &lt;/init-param&gt;
                    &lt;/init-params&gt;
                &lt;/cache-mapping&gt;

                For any matching cache name, any occurrence of the literal
                "{cache-loader}" in any part of the corresponding cache-scheme
                element will be replaced with the string "com.acme.MyCacheLoader"
                and any occurrence of the literal "{size-limit}" will be
                replaced with the value of "1000".

                Used in: caching-config

            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="cache-name" />
                <xsd:element ref="scheme-name" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="caching-schemes">
        <xsd:annotation>
            <xsd:documentation>
                The caching-schemes element contains the definitions of all the
                available caching schemes. Caching schemes can be defined from
                scratch or configured to use other caching schemes and override
                some of the characteristics of the schemes they use. Specifying
                scheme-name allows for other schemes to refer to a scheme by its
                unique name. Specifying scheme-ref allows for the scheme
                to inherit all the characteristics defined in the base scheme whose
                scheme-name is referred to by scheme-ref element, overriding any
                subset of its settings.

                Used in: cache-config
            </xsd:documentation>
        </xsd:annotation>
        <!--
            clustered-caching-scheme: distributed-scheme, replicated-scheme, transactional-scheme,
            optimistic-scheme composite-caching-scheme: near-scheme,
            standalone-caching-scheme: local-scheme, external-scheme, paged-external-scheme,
                class-scheme, overflow-scheme -->
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element ref="clustered-caching-scheme" />
                    <xsd:group ref="standalone-caching-scheme" />
                    <xsd:group ref="composite-caching-scheme" />
                    <xsd:element ref="invocation-scheme" />
                    <xsd:element ref="read-write-backing-map-scheme" />
                    <xsd:element ref="remote-cache-scheme" />
                    <xsd:element ref="remote-invocation-scheme" />
                    <xsd:element ref="proxy-scheme" />
                </xsd:choice>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="clustered-caching-scheme" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                includes: distributed-scheme, replicated-scheme, transactional-scheme,
                optimistic-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="distributed-scheme" substitutionGroup="clustered-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The distributed-scheme element contains the distributed caching scheme
                configuration info.

                Used in: clustered-caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="compressor" minOccurs="0" />
                <xsd:element ref="thread-count" minOccurs="0" />
                <xsd:element ref="lease-granularity" minOccurs="0" />
                <xsd:element ref="local-storage" minOccurs="0" />
                <xsd:element ref="partition-count" minOccurs="0" />
                <xsd:element ref="transfer-threshold" minOccurs="0" />
                <xsd:element ref="backup-count" minOccurs="0" />
                <xsd:element ref="backup-count-after-writebehind"
                    minOccurs="0" />
                <xsd:element ref="backup-storage" minOccurs="0" />
                <xsd:element ref="key-associator" minOccurs="0" />
                <xsd:element ref="key-partitioning" minOccurs="0" />
                <xsd:element ref="partition-assignment-strategy"
                    minOccurs="0" />
                <xsd:element ref="partition-listener" minOccurs="0" />
                <xsd:element ref="task-hung-threshold" minOccurs="0" />
                <xsd:element ref="task-timeout" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="member-listener" minOccurs="0" />
                <xsd:element ref="operation-bundling" minOccurs="0" />
                <xsd:element ref="backing-map-scheme" minOccurs="0" />
                <xsd:element ref="partitioned-quorum-policy-scheme"
                    minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="transactional-scheme" substitutionGroup="clustered-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The transactional-scheme element contains the transactional caching
                scheme configuration info.

                Used in: clustered-caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="compressor" minOccurs="0" /> 
                <xsd:element ref="thread-count" minOccurs="0" />
                <xsd:element ref="local-storage" minOccurs="0" />
                <xsd:element ref="partition-count" minOccurs="0" />
                <xsd:element ref="high-units" minOccurs="0" />
                <xsd:element ref="transfer-threshold" minOccurs="0" />
                <xsd:element ref="backup-count" minOccurs="0" />
                <xsd:element ref="partition-assignment-strategy"
                    minOccurs="0" />
                <xsd:element ref="task-hung-threshold" minOccurs="0" />
                <xsd:element ref="task-timeout" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="partitioned-quorum-policy-scheme"
                    minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="replicated-scheme" substitutionGroup="clustered-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The replicated-scheme element contains the replicated caching scheme
                configuration info.

                Used in: clustered-caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="standard-lease-milliseconds"
                    minOccurs="0" />
                <xsd:element ref="lease-granularity" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="member-listener" minOccurs="0" />
                <xsd:element ref="backing-map-scheme" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="optimistic-scheme" substitutionGroup="clustered-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The optimistic-scheme element contains the optimistic caching scheme
                configuration info.

                Used in: clustered-caching-scheme
             </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="member-listener" minOccurs="0" />
                <xsd:element ref="backing-map-scheme" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:group name="composite-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The composite-caching-scheme entity defines the selection of the
                composite caching scheme types, designed to create multi-tiered
                clustered caches with persistence implementations, loaders, etc.
                These caches utilize other caches as building blocks to provide
                more sophisticated functionality.

                Used in: caching-schemes
            </xsd:documentation>
        </xsd:annotation>
        <xsd:choice>
            <xsd:element ref="near-scheme" />
        </xsd:choice>
    </xsd:group>

    <xsd:group name="standalone-caching-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The standalone-caching-scheme entity defines the selection of the
                standalone caching scheme types, designed to run in a single JVM
                and to be used by other caching schemes for data storage on for
                cache values on a specific participating cluster node.

                Used in: caching-schemes, internal-cache-scheme,
                back-scheme, backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:choice>
            <xsd:element ref="local-scheme" />
            <xsd:element ref="external-scheme" />
            <xsd:element ref="paged-external-scheme" />
            <xsd:element ref="overflow-scheme" />
            <xsd:element ref="class-scheme" />
            <xsd:element ref="flashjournal-scheme" />
            <xsd:element ref="ramjournal-scheme" />
        </xsd:choice>
    </xsd:group>

    <xsd:element name="remote-invocation-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The remote-invocation-scheme element contains the configuration info
                necessary to execute tasks within the context of a cluster without
                having to first join the cluster.

                Used in: caching-schemes
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="initiator-config" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="invocation-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The invocation-scheme element contains the
                invocation scheme configuration info.

                Used in: caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="thread-count" minOccurs="0" />
                <xsd:element ref="task-hung-threshold" minOccurs="0" />
                <xsd:element ref="task-timeout" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="member-listener" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="read-write-backing-map-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The read-write-backing-map-scheme element contains
                the read-write backing map configuration info.

                This scheme is implemented by
                com.tangosol.net.cache.ReadWriteBackingMap
                class (unless overridden by the class-name element).

                Used in: caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="internal-cache-scheme" minOccurs="0" />
                <xsd:element ref="write-max-batch-size" minOccurs="0" />
                <xsd:element ref="miss-cache-scheme" minOccurs="0" />
                <xsd:element ref="cachestore-scheme" minOccurs="0" />
                <xsd:element ref="read-only" minOccurs="0" />
                <xsd:choice minOccurs="0">
                    <xsd:element ref="write-delay" />
                    <xsd:element ref="write-delay-seconds" />
                </xsd:choice>
                <xsd:element ref="write-batch-factor" minOccurs="0" />
                <xsd:element ref="write-requeue-threshold" minOccurs="0" />
                <xsd:element ref="refresh-ahead-factor" minOccurs="0" />
                <xsd:element ref="cachestore-timeout" minOccurs="0" />
                <xsd:element ref="rollback-cachestore-failures"
                    minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="remote-cache-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The remote-cache-scheme element contains the
                configuration info necessary to use a clustered
                cache from outside the cluster.

                Used in: caching-schemes, cachestore-scheme, back-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="operation-bundling" minOccurs="0" />
                <xsd:element ref="initiator-config" minOccurs="0" />
                <xsd:element ref="defer-key-association-check" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>


    <xsd:element name="proxy-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The proxy-scheme element contains the configuration
                info for a clustered service that allows clients to use
                clustered services without having to join the cluster.

                Used in: caching-schemes
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="thread-count" minOccurs="0" />
                <xsd:element ref="task-hung-threshold" minOccurs="0" />
                <xsd:element ref="task-timeout" minOccurs="0" />
                <xsd:element ref="request-timeout" minOccurs="0" />
                <xsd:element ref="guardian-timeout" minOccurs="0" />
                <xsd:element ref="service-failure-policy" minOccurs="0" />
                <xsd:element ref="member-listener" minOccurs="0" />
                <xsd:element ref="acceptor-config" minOccurs="0" />
                <xsd:element ref="proxy-config" minOccurs="0" />
                <xsd:element ref="load-balancer" minOccurs="0" />
                <xsd:element ref="proxy-quorum-policy-scheme" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="local-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The local-scheme element contains the local caching
                scheme configuration info. It should be used to specify
                and configure local caches or backing maps with various
                eviction policies.

                This scheme is implemented by
                com.tangosol.net.cache.LocalCache class (unless
                overridden by the class-name element).

                Used in: standalone-caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="service-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="eviction-policy" minOccurs="0" />
                <xsd:element ref="high-units" minOccurs="0" />
                <xsd:element ref="low-units" minOccurs="0" />
                <xsd:element ref="unit-calculator" minOccurs="0" />
                <xsd:element ref="unit-factor" minOccurs="0" />
                <xsd:element ref="expiry-delay" minOccurs="0" />
                <xsd:element ref="cachestore-scheme" minOccurs="0" />
                <xsd:element ref="pre-load" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="near-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The near-scheme element contains the near caching
                scheme configuration info.

                This scheme is implemented by com.tangosol.net.cache.NearCache
                class (unless overridden by the class-name element).

                Used in: composite-caching-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="front-scheme" minOccurs="0" />
                <xsd:element ref="back-scheme" minOccurs="0" />
                <xsd:element ref="invalidation-strategy" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="overflow-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The overflow-scheme element contains the overflow
                caching scheme configuration info.

                To enable the automatic expiration of cache entries
                in the overflow cache based on the time-to-live setting
                passed to "put(key, value, ttl)", set the expiry-enabled
                element to true or provide a default expiry in the
                expiry-delay element.

                This scheme is implemented by com.tangosol.net.cache.OverflowMap
                class or by com.tangosol.net.cache.SimpleOverflowMap class
                (unless overridden by the class-name element). To explicitly use
                either the OverflowMap or the SimpleOverflowMap implementation,
                specify com.tangosol.net.cache.OverflowMap or
                com.tangosol.net.cache.SimpleOverflowMap explicitly in the
                class-name element. Otherwise, if expiry-enabled is true or if
                the back-scheme is an observable implementation, then the
                OverflowMap will be used. Otherwise, the SimpleOverflowMap will
                be used.

                Used in:
                caching-schemes,distributed-scheme,replicated-scheme,optimistic-scheme,
                read-write-backing-map-scheme.

            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="front-scheme" minOccurs="0" />
                <xsd:element ref="back-scheme" minOccurs="0" />
                <xsd:element ref="miss-cache-scheme" minOccurs="0" />
                <xsd:element ref="expiry-enabled" minOccurs="0" />
                <xsd:element ref="expiry-delay" minOccurs="0" />
                <xsd:element ref="autostart" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="internal-cache-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The internal-cache-scheme element contains the
                internal cache storage configuration info.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice>
                    <xsd:group ref="standalone-caching-scheme" />
                </xsd:choice>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="miss-cache-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The miss-cache-scheme element contains configuration
                info for the local cache used to register cachestore
                misses.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="local-scheme" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="cachestore-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The cachestore-scheme element contains the cachestore
                configuration info.

                Implementation classes should implement one of
                two interfaces: com.tangosol.net.cache.CacheLoader or
                com.tangosol.net.cache.CacheStore

                Used in: read-write-backing-map-scheme,local-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:choice minOccurs="0">
                    <xsd:element ref="class-scheme" />
                    <xsd:element ref="remote-cache-scheme" />
                </xsd:choice>
                <xsd:element ref="operation-bundling" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="external-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The external-scheme element contains the configuration info
                for a cache that is not JVM heap based.

                This scheme is implemented by the
                com.tangosol.net.cache.SerializationMap class for size
                unlimited caches and the com.tangosol.net.cache.SerializationCache
                class for size limited caches.

                The implementation type is chosen based on the following
                rule:
                - if the high-units element is specified and not zero then
                SerializationCache
                is used (and the unit-calculator element is
                respected);
                - otherwise SerializationMap is used.

                The actual com.tangosol.io.BinaryStore implementation supplied to
                the SerializationMap or SerializationCache depends on the specified
                store manager configuration (one of async-store-manager,
                custom-store-manager,lh-file-manager, bdb-store-manager,
                nio-file-manager, or nio-memory-manager).
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:choice minOccurs="0">
                    <xsd:element ref="async-store-manager" />
                    <xsd:element ref="binary-store-manager" />
                </xsd:choice>
                <xsd:element ref="high-units" minOccurs="0" />
                <xsd:element ref="unit-calculator" minOccurs="0" />
                <xsd:element ref="unit-factor" minOccurs="0" />
                <xsd:element ref="expiry-delay" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>


    <xsd:element name="ramjournal-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The ramjournal-scheme uses a SimpleSerializationMap as the
                backing map implementation.

                Used in: caching-schemes, internal-cache-scheme,
                back-scheme, backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="flashjournal-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The flashjournal-scheme

                Used in: caching-schemes, internal-cache-scheme,
                back-scheme, backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
             </xsd:sequence>
             <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="paged-external-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The paged-external-scheme element contains the configuration
                info for a cache that is not JVM heap based and that
                implements an LRU policy using time-based paging.

                This scheme is implemented by the
                com.tangosol.net.cache.SerializationPagedCache
                class. A detailed description of the paged cache functionality can
                be found at
                http://www.tangosol.com/downloads/WriteMostlyBrief.pdf.

                The actual com.tangosol.io.BinaryStoreManager implementation
                supplied to the SerializationPagedCache depends on the specified
                store manager configuration (one of async-store-manager,
                custom-store-manager, lh-file-manager,
                bdb-store-manager, nio-file-manager, or nio-memory-manager).
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:choice minOccurs="0">
                    <xsd:element ref="async-store-manager" />
                    <xsd:element ref="binary-store-manager" />
                </xsd:choice>
                <xsd:element ref="page-limit" minOccurs="0" />
                <xsd:element ref="page-duration" minOccurs="0" />
                <xsd:element ref="listener" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="front-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The front-scheme element contains the front tier
                cache configuration info.

                Used in: overflow-scheme, near-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice>
                    <xsd:element ref="local-scheme" />
                    <xsd:element ref="class-scheme" />
                </xsd:choice>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="back-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The back-scheme element contains the back tier cache
                configuration info.

                Used in: overflow-scheme, near-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice>
                    <xsd:element ref="clustered-caching-scheme" />
                    <xsd:group ref="standalone-caching-scheme" />
                    <xsd:element ref="remote-cache-scheme" />
                </xsd:choice>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="backing-map-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The backing-map-scheme-distributed groups contains
                the backing map configuration info.

                Note: the partitioned element is used if and only if
                the parent element is the distributed-scheme.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="partitioned" minOccurs="0" />
                <xsd:choice>
                    <xsd:group ref="standalone-caching-scheme" />
                    <xsd:element ref="read-write-backing-map-scheme" />
                </xsd:choice>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="partitioned" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The partitioned element specifies whether or not the enclosed
                backing map is a PartitionAwareBackingMap. (This element
                is respected only for backing-map-scheme that is a child of a
                distributed-scheme.) If set to true, the specific scheme contained
                in the backing-map-scheme element will be used to configure backing
                maps for each individual partition of the PartitionAwareBackingMap;
                otherwise it is used for the entire backing map itself.

                The concrete implementations of the PartitionAwareBackingMap
                interface are:
                - com.tangosol.net.partition.ObservableSplittingBackingCache
                - com.tangosol.net.partition.PartitionSplittingBackingMap
                - com.tangosol.net.partition.ReadWriteSplittingBackingMap

                Valid values are "true" or "false". Default value is false.

                Used in: backing-map-scheme (within a distributed-scheme only)
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="binary-store-manager" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                The binary-store-manager entity defines the selection of
                a com.tangosol.io.BinaryStoreManager implementation class.

                Includes: customer-store-manager, lh-file-manager,
                bdb-store-manager, nio-file-manager, nio-memory-manager

                Used in: external-scheme, paged-external-scheme,
                async-store-manager
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="key-associator">
        <xsd:annotation>
            <xsd:documentation>
                The key-associator element contains the configuration info for
                a class that implements the com.tangosol.net.partition.KeyAssociator
                interface. This implementation must have a public default constructor.

                Used in: distributed-scheme
       </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group ref="instance" />
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="key-partitioning">
        <xsd:annotation>
            <xsd:documentation>
                The key-partitioning element contains the configuration info for
                a class that implements the
                com.tangosol.net.partition.KeyPartitioningStrategy interface.
                This implementation must have a public default constructor.

                Used in: distributed-scheme
      </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group ref="instance" />
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="partition-assignment-strategy">
        <xsd:annotation>
            <xsd:documentation>
                The partition-assignment-strategy element contains
                the configuration info for a class that implements the
                com.tangosol.net.partition.PartitionAssignmentStrategy interface.

                Legal values are: "legacy" or configuration info for a class that
                implements the com.tangosol.net.ServiceFailurePolicy interface.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="instance" minOccurs="0" maxOccurs="unbounded" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="partition-listener">
        <xsd:annotation>
            <xsd:documentation>
                The partition-listener element contains the configuration
                info for a class that implements the
                com.tangosol.net.partition.PartitionListener
                interface. This implementation must have a public default
                constructor.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group ref="instance" />
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="compressor">
        <xsd:annotation>
            <xsd:documentation>
                The compressor element specifies whether or not backup binary
                entries are updated using a delta. A delta represents the parts
                of a backup entry that must be changed in order to synchronize
                it with the primary version of the entry. Deltas are created
                and applied using a compressor. The default behavior is to
                replace the whole backup binary entry when the primary entry
                changes.

                Valid values are "none" (default), "standard", and the fully
                qualified name of a class that implements
                the com.tangosol.io.DeltaCompressor interface.

                The value of "standard" automatically selects a delta
                compressor based on the serializer being used by the
                partitioned service.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="instance" minOccurs="0" maxOccurs="1" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:attribute name="system-property" type="xsd:normalizedString"
                use="optional" />
            <xsd:anyAttribute namespace="##other" processContents="lax" />
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="member-listener">
        <xsd:annotation>
            <xsd:documentation>
                The member-listener element contains the
                configuration info for a class that implements the
                com.tangosol.net.MemberListener interface.
                This implementation must have a public default
                constructor.

                Used in: distributed-scheme,
                replicated-scheme, optimistic-scheme,
                invocation-scheme, proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group ref="instance" />
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="task-hung-threshold" type="coherence-time-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The task-hung-threshold element specifies the amount of time
                in milliseconds that a request can execute on a service
                worker thread before it is considered as "hung".

                Note 1:
                This element is applicable only if the "thread-count" value
                is positive.

                Note 2:
                While a request is queued up and until the actual processing
                starts, the corresponding task is never considered as hung.

                Used in: distributed-scheme, transactional-scheme,
                invocation-scheme, proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="task-timeout" type="coherence-time-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                For the partitioned (distributed) cache service the task-timeout
                element specifies the timeout value in milliseconds for requests
                executing on the service worker threads.

                For the invocation service, it specifies the timeout value for
                Invocable tasks that implement the com.tangosol.net.PriorityTask
                interface, but don't explicitly specify the execution timeout value
                (getExecutionTimeoutMillis() returns zero).

                A value of zero indicates that the default timeout (as specified by
                service-guardian/timeout-milliseconds in the operational configuration
                descriptor) will be used.

                Note: This element is applicable only if the "thread-count" value is
                positive.

                Used in: distributed-scheme, transactional-scheme, invocation-scheme,
                proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="guardian-timeout" type="coherence-time-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The guardian-timeout element specifies the guardian timeout value to
                use for guarding the service and any dependant threads. If the guardian-timeout
                is not specified for a given service, the default guardian timeout (as
                specified by the operational config element "service-guardian/timeout-milliseconds")
                is used.

                The value of this element must be in the following format:

                [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

                where the first non-digits (from left to right) indicate the unit of time
                duration:

                -MS or ms
                (milliseconds)
                -S or s (seconds)
                -M or m (minutes)
                -H or h (hours)
                -D or d (days)

                If the value does not contain a unit, a unit of milliseconds
                is assumed.

                Used in: distributed-scheme, replicated-scheme,
                optimistic-scheme,invocation-scheme, proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="service-failure-policy">
        <xsd:annotation>
            <xsd:documentation>
                The service-failure-policy element contains the configuration info
                for how to respond an abnormally behaving service.

                Legal values are: "exit-cluster", "exit-process", "logging", or
                configuration info for a class that implements the
                com.tangosol.net.ServiceFailurePolicy interface.

                The pre-defined policies are:

                "exit-cluster"
                This option will  attempt to recover threads that appear be
                unresponsive, and failing that, attempt to stop the associated
                service. If  the associated service cannot be stopped, this policy
                will cause the local node to stop the cluster services

                "exit-process"
                This option will attempt to recover threads that appear be unresponsive,
                and failing that, attempt to stop the associated service. If the
                associated service cannot be stopped, this policy will cause the local
                node to exit the JVM to terminate abruptly

                "logging"
                This option will cause any detected problems to be logged,
                but no corrective action will be taken

                Default value is "exit-cluster".

                Used in: distributed-scheme, replicated-scheme,
                optimistic-scheme, invocation-scheme, proxy-scheme

            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="instance" minOccurs="0" maxOccurs="unbounded" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="custom-store-manager" substitutionGroup="binary-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The custom-store-manager element specifies the configuration info
                for a custom com.tangosol.io.BinaryStoreManager implementation class.

                Used in: external-scheme, paged-external-scheme, async-store-manager
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="lh-file-manager" substitutionGroup="binary-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The lh-file-manager element specifies the configuration info for a
                com.tangosol.io.BinaryStoreManager implementation that creates
                com.tangosol.io.BinaryStore objects that use LH files for their
                underlying storage.

                This store manager is implemented by the
                com.tangosol.io.lh.LHBinaryStoreManager class. The BinaryStore
                objects created by this class are instances of
                com.tangosol.io.lh.LHBinaryStore.

                Used in: external-scheme, paged-external-scheme, async-store-manager
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="directory" minOccurs="0" />
                <xsd:element ref="file-name" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="bdb-store-manager" substitutionGroup="binary-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The bdb-store-manager element specifies the configuration info
                for a com.tangosol.io.BinaryStoreManager implementation that
                creates com.tangosol.io.BinaryStore objects that use Berkeley
                DB JE for their underlying storage.

                This store manager is implemented by the
                com.tangosol.io.bdb.BerkeleyDBBinaryStoreManager
                class. The BinaryStore objects created by this class are
                instances of com.tangosol.io.bdb.BerkeleyDBBinaryStore.

                Used in: external-scheme, paged-external-scheme,
                async-store-manager
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="directory" minOccurs="0" />
                <xsd:element ref="store-name" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="nio-file-manager" substitutionGroup="binary-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The nio-file-manager element specifies the configuration info
                for a com.tangosol.io.BinaryStoreManager implementation that
                creates com.tangosol.io.BinaryStore objects that use NIO
                memory mapped files for their underlying storage.

                This store manager is implemented by the
                com.tangosol.io.nio.MappedStoreManager class. The BinaryStore
                objects created by this class are instances of
                com.tangosol.io.nio.BinaryMap.

                Used in: external-scheme, paged-external-scheme,
                async-store-manager
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="initial-size" minOccurs="0" />
                <xsd:element ref="maximum-size" minOccurs="0" />
                <xsd:element ref="directory" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="nio-memory-manager" substitutionGroup="binary-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The nio-memory-manager element specifies the configuration info
                for a com.tangosol.io.BinaryStoreManager implementation that
                creates com.tangosol.io.BinaryStore objects that use direct
                java.nio.ByteBuffer objects for their underlying storage.

                This store manager is implemented by the
                com.tangosol.io.nio.DirectStoreManager class. The BinaryStore
                objects created by this class are instances of
                com.tangosol.io.nio.BinaryMap.

                Used in: external-scheme, paged-external-scheme,
                async-store-manager
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="initial-size" minOccurs="0" />
                <xsd:element ref="maximum-size" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="async-store-manager">
        <xsd:annotation>
            <xsd:documentation>
                The async-store-manager element specifies the configuration info
                for a wrapper com.tangosol.io.BinaryStoreManager implementation
                that creates wrapper com.tangosol.io.BinaryStore objects that
                perform write operations asynchronously.

                This store manager is implemented by the
                com.tangosol.io.AsyncBinaryStoreManager class. The BinaryStore
                objects created by this class are instances of
                com.tangosol.io.AsyncBinaryStore.

                Used in: external-scheme, paged-external-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="binary-store-manager" />
                <xsd:element ref="async-limit" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="initial-size" type="coherence-memorySize-type">
        <xsd:annotation>
            <xsd:documentation>
                The initial-size element specifies the initial buffer size
                in bytes.

                Only applicable with "NIO-*" file-managers in the external-scheme,
                the nio-file-manager, the nio-memory-manager, and the "file-mapped"
                type for backup-storage.

                The value of this
                element must be in the following format:

                (\d)+((.)(\d)+)?[K|k|M|m|G|g|T|t]?[B|b]?

                where the first non-digit (from left to right) indicates the factor
                with which the preceding decimal value should be multiplied:

                -K or k (kilo, 2^10)
                -M or m (mega, 2^20)
                -G or g (giga, 2^30)
                -T or t (tera, 2^40)

                If the value does not contain a factor, a factor of mega is assumed.

                Valid values are positive integers between 1 and Integer.MAX_VALUE -
                1023.

                Default value is 1MB.

                Used in: external-scheme, backup-storage,
                nio-file-manager, nio-memory-manager
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="maximum-size" type="coherence-memorySize-type">
        <xsd:annotation>
            <xsd:documentation>
                The maximum-size element specifies the maximum buffer size
                in bytes.

                Only applicable with "NIO-*" file-managers in the external-scheme,
                the nio-file-manager, the nio-memory-manager, and the "file-mapped"
                type for backup-storage.

                The value of this element must be in the following format:

                (\d)+((.)(\d)+)?[K|k|M|m|G|g|T|t]?[B|b]?


                where the first non-digit (from left to right) indicates the factor
                with which the preceding decimal value should be multiplied:

                -K or k (kilo, 2^10)
                -M or m (mega, 2^20)
                -G or g (giga, 2^30)
                -T or t (tera, 2^40)

                If the value does not contain a factor, a factor of mega is assumed.

                Valid values are positive integers between 1 and Integer.MAX_VALUE -
                1023.

                Default value is 1024MB.

                Used in: external-scheme, backup-storage,
                nio-file-manager, nio-memory-manager
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:simpleType name="pageLimit-limit-type">
        <xsd:restriction base="xsd:positiveInteger">
            <xsd:minInclusive value="2" />
            <xsd:maxInclusive value="3600" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="pageLimit-limit-zero-type">
        <xsd:restriction base="xsd:nonNegativeInteger">
            <xsd:minInclusive value="0" />
            <xsd:maxInclusive value="0" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="pageLimit-union-zero-type">
        <xsd:union memberTypes="pageLimit-limit-type pageLimit-limit-zero-type" />
    </xsd:simpleType>

    <xsd:simpleType name="pageLimit-union-type">
        <xsd:union memberTypes="pageLimit-union-zero-type coherence-base-type" />
    </xsd:simpleType>

    <xsd:complexType name="pageLimit-type">
        <xsd:simpleContent>
            <xsd:extension base="pageLimit-union-type">
                <xsd:attribute name="system-property" type="xsd:normalizedString"
                    use="optional" />
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:element name="page-limit" type="pageLimit-type">
        <xsd:annotation>
            <xsd:documentation>
                The page-limit element specifies the maximum
                number of active pages.

                Valid values are positive integers between 2
                and 3600 and zero.

                Default value is zero.

                Used in: external-scheme,
                paged-external-scheme
      </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="page-duration" type="coherence-time-type">
        <xsd:annotation>
            <xsd:documentation>
                The page-duration element specifies length of
                time, in seconds, that a page is current.

                The value of this element
                must be in the following format:

                (\d)+((.)(\d)+)?[MS|ms|S|s|M|m|H|h|D|d]?

                where the first non-digits (from left to right) indicate
                the unit of time duration:

                -MS or ms
                (milliseconds)
                -S or s (seconds)
                -M or m (minutes)
                -H or h (hours)
                -D or d (days)

                If the value does not contain a unit, a unit of seconds is
                assumed.

                Valid values are between 5 and 604800 seconds (one week) and
                zero.

                Default value is zero.

                Used in: external-scheme, paged-external-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="file-name" type="coherence-string-type">
        <xsd:annotation>
            <xsd:documentation>
                The file-name element specifies the name for a non-temporary file
                to use for a disk persistence manager. This is intended only for local
                caches that are backed by a cache loader from a non-temporary file, so
                that the local cache can be pre-populated from the disk file on startup.

                Used in: lh-file-manager
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="store-name" type="coherence-string-type">
        <xsd:annotation>
            <xsd:documentation>
                The store-name element specifies the name for a non-temporary data
                store to use for a persistence manager. This is intended only for
                local caches that are backed by a cache loader from a non-temporary
                store, so that the local cache can be pre-populated from the store
                on startup.

                Used in: bdb-store-manager
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:simpleType name="operation-name-enum-type">
        <xsd:restriction base="xsd:normalizedString">
            <xsd:enumeration value="all" />
            <xsd:enumeration value="load" />
            <xsd:enumeration value="store" />
            <xsd:enumeration value="erase" />
            <xsd:enumeration value="get" />
            <xsd:enumeration value="put" />
            <xsd:enumeration value="remove" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="operation-name-type">
        <xsd:union memberTypes="coherence-base-type operation-name-enum-type" />
    </xsd:simpleType>

    <xsd:complexType name="operation-name-system-property-type">
        <xsd:simpleContent>
            <xsd:extension base="operation-name-type">
                <xsd:attribute name="system-property" type="xsd:normalizedString"
                    use="optional" />
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:element name="operation-name" type="operation-name-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The operation-name element specifies the operation name for which calls
                performed concurrently on multiple threads will be "bundled" into a
                functionally analogous [bulk] operation that takes a collection of
                arguments instead of a single one.

                Valid values depend on the bundle configuration context. For the
                cachestore-scheme the valid operations are "load", "store" and
                "erase". For the distributed-scheme and remote-cache-scheme the valid
                operations are "get", "put" and "remove". In all cases there is a
                pseudo operation "all", referring to all valid operations.

                Default value is "all".

                Used in: bundle-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="preferred-size" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The preferred-size element specifies the bundle size threshold. When
                a bundle size reaches this value, the corresponding "bulk" operation
                will be invoked immediately. This value is measured in context-specific
                units.

                Valid values are zero (disabled bundling) or positive values.

                Default value is zero.

                Used in: bundle-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="delay-millis" type="coherence-positiveInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The delay-millis element specifies the maximum amount of
                time in milliseconds that individual execution requests are
                allowed to be deferred for a purpose of "bundling" them
                together and passing into a corresponding bulk operation.
                If the preferred-size threshold is reached before the
                specified delay, the bundle is processed immediately.

                Valid values are positive numbers.

                Default value is 1.

                Used in: bundle-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="thread-threshold" type="coherence-positiveInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The thread-threshold element specifies the minimum number of
                threads that must be concurrently executing individual
                (non-bundled) requests for the bundler to switch from a
                pass-through to a bundling mode.

                Valid values are positive numbers.

                Default value is 4.

                Used in: bundle-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="auto-adjust" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The auto-adjust element specifies whether or not the auto
                adjustment of the preferred-size value (based on the
                run-time statistics) is allowed.

                Valid values are "true" or "false".

                Default value is "false".

                Used in: bundle-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="connection-limit" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The maximum number of simultaneous connections allowed by a connection
                acceptor.

                Valid values are positive integers and zero.

                A value of zero implies no limit.

                Default value is zero.

                Used in: acceptor-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="operation-bundling">
        <xsd:annotation>
            <xsd:documentation>
                The operation-bundling element specifies the configuration info
                for a particular bundling strategy.

                Bundling is a process of coalescing multiple individual operations
                into "bundles". It could be beneficial when (1) there is a continuous
                stream of operations on multiple threads in parallel; (2) individual
                operations have relatively high latency (network or
                database-related); and (3) there are functionally analogous [bulk]
                operations that take a collection of arguments instead of a single
                one without causing the latency to grow linearly (as a function of
                the collection size).

                Note: As with any bundling algorithm, there is a natural trade-off
                between the resource utilization and average request latency.
                Depending on a particular application usage pattern, enabling this
                feature may either help or hurt the overall application performance.

                See com.tangosol.net.cache.AbstractBundler for
                additional implementation details.

                Used in: cachestore-scheme,
                distributed-scheme, remote-cache-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="bundle-config" maxOccurs="unbounded" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="bundle-config">
        <xsd:annotation>
            <xsd:documentation>
                The bundle-config element specifies the bundling strategy
                configuration for one or more bundle-able operations.

                Used in: operation-bundling
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="operation-name" minOccurs="0" />
                <xsd:element ref="preferred-size" minOccurs="0" />
                <xsd:element ref="delay-millis" minOccurs="0" />
                <xsd:element ref="thread-threshold" minOccurs="0" />
                <xsd:element ref="auto-adjust" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="initiator-config">
        <xsd:annotation>
            <xsd:documentation>
                The initiator-config element specifies the configuration info
                for a protocol-specific connection initiator. A connection
                initiator allows a client to connect to a cluster (via a
                connection acceptor) and use the clustered services offered by
                the cluster without having to first join the cluster.

                Used in: remote-cache-scheme, remote-invocation-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="tcp-initiator" />
                <xsd:element ref="outgoing-message-handler" minOccurs="0" />
                <xsd:element ref="use-filters" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="acceptor-config">
        <xsd:annotation>
            <xsd:documentation>
                The acceptor-config element specifies the configuration info
                for a protocol-specific connection acceptor used by a proxy
                service to enable clients to connect to the cluster and use
                the services offered by the cluster without having to join the
                cluster.

                Used in: proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice>
                  <xsd:element ref="http-acceptor" />
                  <xsd:element ref="tcp-acceptor" />
                </xsd:choice>
                <xsd:element ref="outgoing-message-handler" minOccurs="0" />
                <xsd:element ref="use-filters" minOccurs="0" />
                <xsd:element ref="serializer" minOccurs="0" />
                <xsd:element ref="connection-limit" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="proxy-config">
        <xsd:annotation>
            <xsd:documentation>
                The proxy-config element specifies the configuration info
                for the clustered service proxies managed by a proxy service.
                A service proxy is an intermediary between a remote client
                (connected to the cluster via a connection acceptor) and a
                clustered service used by the remote client.

                Used in: proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="cache-service-proxy" minOccurs="0" />
                <xsd:element ref="invocation-service-proxy" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="load-balancer">
        <xsd:annotation>
            <xsd:documentation>
                The load-balancer element contains the configuration info for
                a pluggable    strategy used by the proxy service to distribute
                client connections across the set of clustered proxy service
                members.

                Legal values are: "proxy", "client", or configuration info
                for a class that implements the
                com.tangosol.net.proxy.ProxyServiceLoadBalancer interface.

                The pre-defined strategies are:
                "proxy"
                This strategy will attempt to distribute client connections equally
                across proxy service members based upon existing connection count,
                connection limit, incoming and outgoing message backlog, and daemon
                pool utilization.

                "client"
                This strategy relies upon the client address provider implementation to
                dictate the distribution of clients across proxy service members.

                Default value is "proxy".

                Used in: proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="instance" minOccurs="0" maxOccurs="unbounded"/>
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="tcp-initiator">
        <xsd:annotation>
            <xsd:documentation>
                The tcp-initiator element specifies the configuration info for a
                connection initiator that enables clients to connect to a remote \
                cluster via TCP/IP.

                Used in: initiator-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="socket-provider" minOccurs="0" />
                <xsd:element ref="local-address" minOccurs="0" />
                <xsd:element ref="remote-addresses" />
                <xsd:element ref="reuse-address" minOccurs="0" />
                <xsd:element ref="keep-alive-enabled" minOccurs="0" />
                <xsd:element ref="tcp-delay-enabled" minOccurs="0" />
                <xsd:element ref="receive-buffer-size" minOccurs="0" />
                <xsd:element ref="send-buffer-size" minOccurs="0" />
                <xsd:element ref="connect-timeout" minOccurs="0" />
                <xsd:element ref="linger-timeout" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="http-acceptor">
        <xsd:annotation>
            <xsd:documentation>
                The http-acceptor element specifies the configuration info for a
                connection acceptor that accepts connections from remote REST
                clients over HTTP.

                Used in: acceptor-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="local-address" />
                <xsd:element ref="resource-config" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="tcp-acceptor">
        <xsd:annotation>
            <xsd:documentation>
                The tcp-acceptor element specifies the configuration info for a
                connection acceptor that accepts connections from remote clients
                over TCP/IP.

                Used in: acceptor-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="socket-provider" minOccurs="0" />
                <xsd:choice>
                    <xsd:element ref="local-address" />
                    <xsd:element ref="address-provider" />
                </xsd:choice>
                <xsd:element ref="reuse-address" minOccurs="0" />
                <xsd:element ref="keep-alive-enabled" minOccurs="0" />
                <xsd:element ref="tcp-delay-enabled" minOccurs="0" />
                <xsd:element ref="receive-buffer-size" minOccurs="0" />
                <xsd:element ref="send-buffer-size" minOccurs="0" />
                <xsd:element ref="listen-backlog" minOccurs="0" />
                <xsd:element ref="linger-timeout" minOccurs="0" />
                <xsd:element ref="authorized-hosts" minOccurs="0" />
                <xsd:element ref="suspect-protocol-enabled" minOccurs="0" />
                <xsd:element ref="suspect-buffer-size" minOccurs="0" />
                <xsd:element ref="suspect-buffer-length" minOccurs="0" />
                <xsd:element ref="nominal-buffer-size" minOccurs="0" />
                <xsd:element ref="nominal-buffer-length" minOccurs="0" />
                <xsd:element ref="limit-buffer-size" minOccurs="0" />
                <xsd:element ref="limit-buffer-length" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="authorized-hosts">
        <xsd:annotation>
            <xsd:documentation>
                The authorized-hosts element contains the collection of IP addresses
                of TCP/IP initiator hosts that are allowed to connect to the cluster
                via a TCP/IP acceptor. If this collection is empty no constraints are
                imposed.

                Used in: cluster-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="host-address" minOccurs="0" maxOccurs="unbounded" />
                <xsd:element ref="host-range" minOccurs="0" maxOccurs="unbounded" />
                <xsd:element ref="host-filter" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="host-range">
        <xsd:annotation>
            <xsd:documentation>
                The host-range element describes a range of IP addresses.

                Used in: authorized-hosts
      </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="from-address" />
                <xsd:element ref="to-address" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="host-filter">
        <xsd:annotation>
            <xsd:documentation>
                The host-filter element contains the class configuration info
                for a com.tangosol.util.Filter implementation that is used by
                a TCP/IP acceptor to determine whether to accept a particular
                TCP/IP initiator. The evaluate() method will be passed the
                java.net.InetAddress of the client. Implementations should
                return "true" to allow the client to connect.

                Used in: authorized-hosts
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="local-address">
        <xsd:annotation>
            <xsd:documentation>
                The local-address element specifies the local address
                (IP or DNS name) and port that a TCP/IP socket will be bound
                to.

                Note: As of Coherence 3.5 the "reusable" element is deprecated;
                use the "reuse-address" element for the tcp-acceptor and
                tcp-initiator instead.

                Used in: tcp-initiator, tcp-acceptor
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="address" minOccurs="0" />
                <xsd:element ref="port" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="lock-enabled" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The lock-enabled element specifies whether or not
                lock requests from remote clients are permitted on a cache.

                Used in: cache-service-proxy
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="reuse-address" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The reuse-address element specifies whether or not a TCP/IP
                socket can be bound to an address if a previous connection is
                in a timeout state.

                When a TCP/IP connection is closed the connection may remain in a
                timeout state for a period of time after the connection is closed
                (typically known as the TIME_WAIT state or 2MSL wait state). For
                applications using a well known socket address or port it may not
                be possible to bind a socket to a required address if there is a
                connection in the timeout state involving the socket address or port.

                Valid values are true and false.

                Default value is true for the tcp-acceptor and false for the
                tcp-initiator.

                Used in: tcp-initiator, tcp-acceptor
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="listen-backlog" type="coherence-positiveInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The value of the listen-backlog element is used to configure
                the size of the TCP/IP server socket backlog queue.

                Valid values are positive integers.

                Default value is O/S dependent.

                Used in: tcp-acceptor
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="host-address" type="coherence-IPHostName-type">
        <xsd:annotation>
            <xsd:documentation>
                The host-address element specifies a host IP address.

                Used in: authorized-hosts
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="resource-config">
        <xsd:annotation>
            <xsd:documentation>
                The resource-config element contains the configuration info
                for an instance of <tt>com.sun.jersey.api.core.ResourceConfig</tt>.

                This <tt>ResourceConfig</tt> instance is used by the HTTP
                acceptor to load resource and provider classes for a REST
                application.

                Default value is an instance of
                <tt>com.tangosol.coherence.rest.server.DefaultResourceConfig</tt>.

                Used in: http-acceptor
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="instance" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="cache-service-proxy">
        <xsd:annotation>
            <xsd:documentation>
                The cache-service-proxy element contains the configuration info
                for a cache service proxy managed by a proxy service.

                Used in: proxy-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="enabled" minOccurs="0" />
                <xsd:element ref="lock-enabled" minOccurs="0" />
                <xsd:element ref="read-only" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="invocation-service-proxy">
        <xsd:annotation>
            <xsd:documentation>
                The cache-service-proxy element contains the configuration info
                for an invocation service proxy managed by a proxy service.

                Used in: proxy-config
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="class-name" minOccurs="0" />
                <xsd:element ref="init-params" minOccurs="0" />
                <xsd:element ref="enabled" minOccurs="0" />
                <xsd:any namespace="##other" processContents="lax"
                    minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="partitioned-quorum-policy-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The partitioned-quorum-policy-scheme configuration element contains
                the configuration info for the policy for the partitioned cache service.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:choice>
                    <xsd:sequence>
                        <xsd:element ref="distribution-quorum" minOccurs="0" />
                        <xsd:element ref="restore-quorum" minOccurs="0" />
                        <xsd:element ref="read-quorum" minOccurs="0" />
                        <xsd:element ref="write-quorum" minOccurs="0" />
                    </xsd:sequence>
                    <xsd:group ref="instance" />
                </xsd:choice>
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="distribution-quorum" type="coherence-nonNegativeInteger-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The distribution-quorum configuration element specifies the minimum
                number of ownership-enabled members of a partitioned service that
                must be present in order to perform partition distribution or
                establish new partition backups.

                Valid values are non-negative integers.

                Used in: partitioned-quorum-policy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="restore-quorum" type="coherence-nonNegativeInteger-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The restore-quorum configuration element specifies the minimum number
                of ownership-enabled members of a partitioned service that must be
                present in order to restore lost primary partitions from backup.

                Valid values are non-negative integers.

                Used in: partitioned-quorum-policy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="read-quorum" type="coherence-nonNegativeInteger-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The read-quorum configuration element specifies the minimum number
                of storage members of a cache service that must be present in
                order to process "read" requests. A "read" request is any
                request that does not mutate the state or contents of a cache.

                Valid values are non-negative integers.

                Used in: partitioned-quorum-policy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-quorum" type="coherence-nonNegativeInteger-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-quorum configuration element specifies the minimum
                number of storage members of a cache service that must be
                present in order to process "write" requests. A "write"
                request is any request that may mutate the state
                or contents of a cache.

                Valid values are non-negative integers.

                Used in: partitioned-quorum-policy-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="proxy-quorum-policy-scheme">
        <xsd:annotation>
            <xsd:documentation>
                The proxy-quorum-policy-scheme configuration element contains
                the configuration info for the quorum-based action policy for
                the proxy service.

                Used in: proxy-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="scheme-name" minOccurs="0" />
                <xsd:element ref="scheme-ref" minOccurs="0" />
                <xsd:choice>
                    <xsd:element ref="connect-quorum" minOccurs="0" />
                    <xsd:group ref="instance" />
                </xsd:choice>
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="connect-quorum" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The connect-quorum configuration element specifies the minimum
                number of members of a proxy service that must be present
                in order to allow client connections.

                Valid values are non-negative integers.

                Used in: proxy-quorum-policy-scheme
      </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:element name="read-only" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The read-only element specifies a readonly setting for
                the cachestore. If true the cache will only load data
                from cachestore for read operations and will not
                perform any writing to the cachestore when the cache
                is updated.

                Valid values are "true" or "false".

                Default value is false.

                Used in: read-write-backing-map-scheme,
                cache-proxy-config
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-delay" type="coherence-time-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-delay element specifies the time interval
                for a write-behind queue to defer asynchronous writes
                to the cachestore by.

                The value of this element must be in the following
                format:

                (\d)+((.)(\d)+)?[MS|ms|S|s|M|m|H|h|D|d]?

                where the first non-digits (from left to right)
                indicate the unit of time duration:

                -MS or ms (milliseconds)
                -S or s (seconds)
                -M or m (minutes)
                -H or h (hours)
                -D or d (days)

                If the value does not contain a unit, a unit of seconds
                is assumed.

                If zero, synchronous writes to the cachestore (without
                queueing) will take place, otherwise the writes will be
                asynchronous and deferred by the specified time interval
                after the last update to the value in the cache.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-delay-seconds" type="coherence-string-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-delay-seconds element specifies the number of
                seconds for a write-behind queue to defer asynchronous
                writes to the cachestore by.

                If zero, synchronous writes to the cachestore
                (without queueing) will take place, otherwise the
                writes will be asynchronous and deferred by the
                number of seconds after the last update to the value in
                the cache.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-batch-factor" type="coherence-decimal-01inc-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-batch-factor element is used to calculate the
                "soft-ripe" time for write-behind queue entries.

                A queue entry is considered to be "ripe" for a write
                operation if it has been in the write-behind queue for
                no less than the write-delay interval. The "soft-ripe"
                time is the point in time prior to the actual ripe time
                after which an entry will be included in a batched
                asynchronous write operation to the cachestore (along
                with all other ripe and soft-ripe entries). In other
                words, a soft-ripe entry is an entry that has been in
                the write-behind queue for at least the following
                duration:

                D' = (1.0 - F)*D

                where:

                D = write-delay interval
                F = write-batch-factor

                Conceptually, the write-behind thread uses the
                following logic when performing
                a batched update:

                (1) The thread waits for a queued entry to become ripe.
                (2) When an entry becomes ripe, the thread dequeues all
                ripe and soft-ripe entries in the queue.
                (3) The thread then writes all ripe and soft-ripe
                entries either via store() (if there is only the single
                ripe entry) or storeAll() (if there are multiple
                ripe/soft-ripe entries).
                (4) The thread then repeats (1).

                This element is only applicable if asynchronous writes
                are enabled (i.e. the value of the write-delay element
                is greater than zero) and the cachestore implements the
                storeAll() method.

                The value of the element is expressed as a percentage of the
                write-delay interval. Valid values are doubles in the interval
                [0.0, 1.0].

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-requeue-threshold" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-requeue-threshold element specifies the size of
                the write-behind queue at which additional actions could be
                taken.

                Prior to Coherence 3.6 reaching this threshold would cause a
                permanent loss of the corresponding store operations. As of
                Coherence 3.6 this value is only used to control the
                frequency of the corresponding log messages. For example,
                the value of 100 will produce a log message every time the
                size of the write queue is a multiple of 100.

                Valid values are positive integers and zero.

                If zero, the requeueing is disabled.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="write-max-batch-size" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The write-max-batch-size element specifies the maximum number
                of entries to write in a single storeAll operation.

                Valid values are positive integers or zero. Default value is
                128 entries.

                If write behind is disabled this value has no effect.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="refresh-ahead-factor" type="coherence-decimal-01inc-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The refresh-ahead-factor element is used to
                calculate the "soft-expiration" time for cache entries.

                Soft-expiration is the point in time prior to the actual
                expiration after which any access request for an entry will
                schedule an asynchronous load request for the entry. This
                element is only applicable for a ReadWriteBackingMap which
                has an internal LocalCache with scheduled automatic
                expiration.

                The value of this element is expressed as a percentage of
                the internal LocalCache expiration interval. Valid values
                are doubles in the interval [0.0, 1.0].

                If zero, refresh-ahead scheduling will be disabled.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="cachestore-timeout" type="coherence-time-type">
        <xsd:annotation>
            <xsd:documentation>
                The cachestore-timeout element is used to specify the
                timeout interval to use for cachestore read and write
                operations. If zero is specified, the default service
                guardian timeout will be used. If a cache store operation
                times out, the executing thread will be interrupted and
                may ultimately lead to the termination of the cache
                service.

                Note: As of Coherence 3.6, timeouts of asynchronous
                CacheStore operations (e.g. Refresh-Ahead, Write-Behind)
                will not result in service termination.

                The value of this element must be in
                the following format:

                (\d)+((.)(\d)+)?[MS|ms|S|s|M|m|H|h|D|d]?

                where the first non-digits (from left to right) indicate
                the unit of time duration:

                -MS or ms (milliseconds)
                -S or s (seconds)
                -M or m (minutes)
                -H or h (hours)
                -D or d (days)

                If the value does not contain a unit, a unit of milliseconds
                is assumed.

                Default value is 0.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="rollback-cachestore-failures" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The rollback-cachestore-failures element specifies whether
                or not exceptions caught during synchronous cachestore
                operations are rethrown to the calling thread (possibly
                over the network to a remote member).

                If the value of this element is false, an exception caught
                during a synchronous cachestore operation is logged locally
                and the internal cache is updated.

                If the value is true, the exception is rethrown to the
                calling thread and the internal cache is not changed. If
                the operation was called within a transactional context,
                this would have the effect of rolling back the current
                transaction.

                Valid values are "true" or "false". Default value is true
                as of Coherence 3.6.

                Used in: read-write-backing-map-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="thread-count"
        type="coherence-nonNegativeInteger-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The thread-count element specifies the number of
                daemon threads. Usage of the daemon threads varies
                for different service types.

                If zero, all relevant tasks are performed on the
                service thread.

                Valid values are positive integers or zero.

                Used in: distributed-scheme, transactional-scheme,
                invocation-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="standard-lease-milliseconds" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The standard-lease-milliseconds element specifies the duration
                of the standard lease in milliseconds. Once a lease has
                aged past this number of milliseconds, the lock will
                automatically be released. Set this value to zero to specify a
                lease that never expires. The purpose of this setting is to
                avoid deadlocks or blocks caused by stuck threads; the value
                should be set higher than the longest expected lock duration
                (e.g. higher than a transaction timeout). It's also recommended
                to set this value higher then packet-delivery/timeout-milliseconds
                value in tangosol-coherence.xml descriptor.

                Valid values are positive integers and zero.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: replicated-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:simpleType name="lease-granularity-enum-type">
        <xsd:restriction base="xsd:normalizedString">
            <xsd:enumeration value="thread" />
            <xsd:enumeration value="member" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="lease-granularity-type">
        <xsd:union memberTypes="coherence-base-type lease-granularity-enum-type" />
    </xsd:simpleType>

    <xsd:complexType name="lease-granularity-system-property-type">
        <xsd:simpleContent>
            <xsd:extension base="lease-granularity-type">
                <xsd:attribute name="system-property" type="xsd:normalizedString"
                    use="optional" />
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:element name="lease-granularity">
        <xsd:annotation>
            <xsd:documentation>
                The lease-granularity element specifies the lease
                ownership granularity.

                Valid values are "thread" and "member". A value of "thread"
                means that locks are held by a thread that obtained them
                and can only be released by that thread. A value of
                "member" means that locks are held by a cluster node and
                any thread running on the cluster node that obtained the
                lock can release it.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: replicated-scheme, distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="local-storage" type="coherence-boolean-system-property-type">
        <xsd:annotation>
            <xsd:documentation>
                The local-storage element specifies whether or not
                this member will store a portion of the data managed by
                the partitioned (distributed) cache service.

                Valid values are "true" or "false". A value of false
                means that the cluster member will not store any of
                the data locally. A value of true means that the cluster
                member will store its fair share of the data.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: distributed-scheme, transactional-scheme
             </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="partition-count" type="coherence-positiveInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The partition-count element specifies the number of partitions
                that a partitioned (distributed) cache will be "chopped up"
                into. Each member running the partitioned cache service that
                has the local-storage option set to true will manage a "fair"
                (balanced) number of partitions.

                The number of partitions should be a prime number and
                sufficiently large such that a given partition is expected
                to be no larger than 50MB in size.

                Good defaults for example service storage sizes are provided below:

                service storage partition-count
                _______________ ______________
                100M                 257
                1G                     509
                10G                 2039
                50G                 4093
                100G                8191

                A list of first 1,000 primes can be found at
                http://www.utm.edu/research/primes/lists/small/1000.txt

                Valid values are positive integers.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: distributed-scheme, transactional-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="transfer-threshold" type="coherence-positiveInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The transfer-threshold element specifies the threshold for
                the primary buckets (partitions) distribution in kilo-bytes.

                When a new node joins the partitioned (distributed) cache
                service or when a member of the partitioned cache service
                leaves, the remaining nodes perform a task of bucket ownership
                re-distribution. During this process, the existing data gets
                re-balanced along with the ownership information. This
                parameter indicates a preferred message size for data transfer
                communications. Setting this value lower will make the
                distribution process take longer, but will reduce network
                bandwidth utilization during this activity.

                Valid values are positive integers.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: distributed-scheme, transactional-scheme
                </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="backup-count" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The backup-count element specifies the number of members of
                the partitioned (distributed) cache service that hold the
                backup data for each unit of storage in the cache.

                Value of 0 means that in the case of abnormal termination,
                some portion of the data in the cache will be lost. Value of
                N means that if up to N cluster nodes terminate at once, the
                cache data will be preserved.

                To maintain the partitioned cache of size M, the total memory
                usage in the cluster does not depend on the number of cluster
                nodes and will be in the order of M*(N+1).

                Recommended values are 0, 1 or 2.

                Default value is the value specified in the
                tangosol-coherence.xml descriptor.

                Used in: distributed-scheme, transactional-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="backup-count-after-writebehind" type="coherence-nonNegativeInteger-type">
        <xsd:annotation>
            <xsd:documentation>
                The backup-count-after-writebehind element specifies the
                number of members of the partitioned (distributed) cache
                service that will retain backup data that does _not_ require
                write-behind, i.e. data that is not vulnerable to being lost
                even if the entire cluster were shut down.

                Specifically, if a unit of storage is marked as requiring
                write-behind, then it will be backed up on the number of
                members specified by the backup-count element, and if the
                unit of storage is not marked as requiring write-behind,
                then it will be backed up only by the number of members
                specified by the backup-count-after-writebehind element.

                Value must be in the range [0.. backup-count].

                Default value is the value specified in the backup-count
                element.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="backup-storage">
        <xsd:annotation>
            <xsd:documentation>
                The backup-storage element contains the backup
                storage configuration info.

                Used in: distributed-scheme
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="type" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            The type element specifies the type of the storage
                            used to hold the backup data.

                            Valid values are "on-heap", "off-heap", "file-mapped",
                            "custom" or "scheme".

                            The corresponding implementations classes are
                            - com.tangosol.util.SafeHashMap,
                            - com.tangosol.io.nio.BinaryMap using
                            com.tangosol.io.nio.DirectBufferManager,
                            - com.tangosol.io.nio.BinaryMap using
                            com.tangosol.io.nio.MappedBufferManager,
                            - the class specified by the backup-storage/class-name
                            element,
                            - the map returned by the ConfigurableCacheFactory for
                            the scheme referred to by the
                            backup-storage/scheme-name element.

                            The "off-heap" and "file-mapped" options are only
                            available with JDK 1.4 and later.

                            Default value is the value specified in the
                            tangosol-coherence.xml descriptor.

                            Used in: backup-storage
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:simpleContent>
                            <xsd:restriction base="coherence-string-type">
                                <xsd:enumeration value="on-heap" />
                                <xsd:enumeration value="off-heap" />
                                <xsd:enumeration value="file-mapped" />
                                <xsd:enumeration value="custom" />
                                <xsd:enumeration value="scheme" />
                            </xsd:restriction>
                        </xsd:simpleContent>
                    </xsd:complexType>
                </xsd:element>

                <xsd:choice minOccurs="0" maxOccurs="1">
                    <xsd:sequence>
                        <xsd:element ref="initial-size" minOccurs="0" /> <!-- only valid with type=(off-heap|file-mapped) -->
                        <xsd:element ref="maximum-size" minOccurs="0" /> <!-- only valid with type=(off-heap|file-mapped) -->
                        <xsd:element ref="directory" minOccurs="0" />    <!-- only valid with type=file-mapped -->
                    </xsd:sequence>
                    <xsd:element ref="class-name" minOccurs="0" />    <!-- only valid when type = custom -->
                    <xsd:element ref="scheme-name" minOccurs="0" />    <!-- only valid when type = scheme -->
                </xsd:choice>

            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>


    <xsd:element name="suspect-protocol-enabled" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The suspect-protocol-enabled element is used to enable or
                disable the Coherence*Extend-TCP rogue client connection
                detection algorithm. This algorithm monitors client connections
                looking for abnormally slow or abusive clients. When a rouge
                client connection is detected, the algorithm closes the
                connection in order to protect the proxy server from running
                out of memory.

                Valid values are true and false.

                The suspect protocol is enabled by default.

                Used in: tcp-acceptor
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:element name="suspect-buffer-size" type="coherence-memorySize-type">
        <xsd:annotation>
            <xsd:documentation>
                The suspect-buffer-size element specifies the outgoing
                connection backlog (in bytes) after which the corresponding
                client connection is marked as suspect. A suspect client
                connection is then monitored until it  is no longer suspect
                or it is closed in order to protect the proxy server from
                running out of memory.

                The value of this element must be in the following format:

                [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

                where the first non-digit (from left to right) indicates
                the factor with which the preceding decimal value should
                be multiplied:

                -K or k (kilo, 2^10)
                -M or m (mega, 2^20)
                -G or g (giga, 2^30)
                -T or t (tera, 2^40)

                If the value does not contain a factor, a factor of one
                is assumed.

                Default value is 10000000.

                Used in: tcp-acceptor
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="suspect-buffer-length" type="coherence-integer-type">
        <xsd:annotation>
            <xsd:documentation>
                The suspect-buffer-length element specifies the outgoing
                connection backlog (in messages) after which the corresponding
                client  connection is marked as suspect. A suspect client
                connection is then monitored until it is no longer suspect or
                it is closed in order to protect the proxy server from running
                out of memory.

                Default value is 10000.

                Used in: tcp-acceptor
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="nominal-buffer-size" type="coherence-memorySize-type">
        <xsd:annotation>
            <xsd:documentation>
                The nominal-buffer-size element specifies the outgoing connection
                backlog (in bytes) at which point a suspect client connection is
                no longer considered to be suspect.

                The value of this element must be in the following format:

                [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

                where the first non-digit (from left to right) indicates the factor
                with which the preceding decimal value should be multiplied:

                -K or k (kilo, 2^10)
                -M or m (mega, 2^20)
                -G or g (giga, 2^30)
                -T or t (tera, 2^40)

                If the value does not contain a factor, a factor of one
                is assumed.

                Default value is 2000000.

                Used in: tcp-acceptor
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="nominal-buffer-length" type="coherence-integer-type">
        <xsd:annotation>
            <xsd:documentation>
                The nominal-buffer-length element specifies the outgoing connection
                backlog (in messages) at which point a suspect client connection
                is no longer considered to be suspect.

                Default value is 2000.

                Used in: tcp-acceptor
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="limit-buffer-size" type="coherence-memorySize-type">
        <xsd:annotation>
            <xsd:documentation>
                The limit-buffer-size element specifies the outgoing
                connection backlog (in bytes) at which point the
                corresponding client connection must be closed
                in order to protect the proxy server from running out
                of memory.

                The value of this element must be in the following
                format:

                [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

                where the first non-digit (from left to right) indicates
                the factor with which the preceding decimal value should
                be multiplied:

                -K or k (kilo, 2^10)
                -M or m (mega, 2^20)
                -G or g (giga, 2^30)
                -T or t (tera, 2^40)

                If the value does not contain a factor, a factor of one
                is assumed.

                Default value is 100000000.

                Used in: tcp-acceptor
     </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="limit-buffer-length" type="coherence-integer-type">

        <xsd:annotation>
            <xsd:documentation>
                The limit-buffer-length element specifies the outgoing connection
                backlog (in messages) at which point the corresponding client
                connection must be closed in order to protect the proxy server
                from running out of memory.

                Default value is 60000.

                Used in: tcp-acceptor
         </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="defer-key-association-check" type="coherence-boolean-type">
        <xsd:annotation>
            <xsd:documentation>
                The defer-key-association-check element specifies whether a
                key should be checked for KeyAssociation by the extend client
                (false) or deferred until the key is received by the
                PartionedService (true).

                Set the defer-key-association-check element value to true
                when the Java key class defined on the Coherence
                cluster-side should be used for KeyAssociation processing.

                Valid values are "true" or "false". Default value is false.

                Used in: remote-cache-scheme
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

</xsd:schema>
